@model F_Result.Models.ActualDebit

@{
    ViewBag.Title = "Создание";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/jquery.datetimepicker.min.css" rel="stylesheet" />

<div id="modDialog" class="modal fade">
    <div id="dialogContent" class="modal-dialog" style="width:660px;"></div>
</div>

<div class="container">
    <div class="col-lg-12">
        <h1 class="page-header">
            @ViewBag.Title
            <small>Добавление фактического платежа</small>
        </h1>
        <ol class="breadcrumb">
            <li>@Html.ActionLink("Главная", "Index", "Home", new { Area = "" }, null)</li>
            <li>Показатели</li>
            <li>@Html.ActionLink("Фактические расходы", "Index", "ActualDebits")</li>
            <li class="active">Создание</li>
        </ol>
    </div>

    <div class="row">
        <div class="col-md-6">
            <p class="text-success"> @TempData["MessageOk"]</p>
            <p class="text-danger"> @TempData["MessageError"]</p>
        </div>
    </div>

    <div class="col-md-6">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Date, new { htmlAttributes = new { type = "text", @class = "form-control", data_val_date = "Проверьте правильность ввода даты (ДД/ММ/ГГГГ)" } })
                        @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Sum, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Sum, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           @onkeyup = "reppoint(this)",
                           @onchange = "reppoint(this)"
                       }
                   })
                        @Html.ValidationMessageFor(model => model.Sum, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProjectId, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">

                        <div class="input-group">
                            @Html.EditorFor(model => model.ProjectId, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               type = "text",
                               id = "prgSelect",
                               placeholder = "Щелкните для выбора",
                               aria_describedby = "basic-addon2",
                               data_url = "/Directum/ShowProjectsPartial",
                               style = "cursor:pointer;"
                           }
                       })
                            <span class="input-group-addon" id="basic-addon2" title="Очистить" style="cursor:pointer;">
                                <i class="glyphicon glyphicon-refresh"></i>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Appointment, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Appointment, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Appointment, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DocNumber, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.DocNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DocNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-4 col-md-8">
                        <button type="submit" title="Сохранить информацию" class="btn btn-default"><i class="glyphicon glyphicon-floppy-save"></i>&nbsp;Сохранить</button>
                    </div>
                </div>
            </div>
        }

        <div>
            <p><a class="btn btn-default" href='@Url.Action("ADShow")'><span class="glyphicon glyphicon-circle-arrow-left"> Назад</span></a></p>
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery.datetimepicker.full.min.js"></script>
    <script type="text/javascript">
        $(function () {
            $.validator.methods.number = function (value, element) {
                return this.optional(element) || /(^\d{1,10}(\,\d{1,2})?$)/.test(value);
            }

            $.datetimepicker.setLocale('ru');

            // <![CDATA[
            jQuery(function () {
                jQuery('#Date').datetimepicker({
                    format: 'd/m/Y',
                    formatDate: 'd/m/Y',
                    timepicker: false
                });
            });
            // ]]>

            $.validator.methods.date = function (value, element) {
                if (value) {
                    try {
                        $.datepicker.parseDate('dd/mm/yy', value);
                    } catch (ex) {
                        return false;
                    }
                }
                return true;
            };
        });

    </script>
    <script>
        //Separator replace. Convert "." to ","
        function reppoint(elem) {
            var d = elem.value;
            if (d.indexOf(".") > 0) {
                var outstr = d.replace(".", ",");
                elem.value = outstr;
            }
        }
    </script>

    <script>
        $(function () {
            $('body').on('click', '#prgSelect', function (e) {
                e.preventDefault();
                var _href = $(this).data('url');
                alert(_href);
                $.get(_href, function (data) {
                    $('#dialogContent').html(data);
                    $('#modDialog').modal('show');
                });
            });

            $('body').on('click', '#basic-addon2', function () {
                alert('Clear');
            });
        })
    </script>
    <script src="~/Scripts/DataTables/jquery.dataTables.min.js"></script>
    <script src="~/Scripts/DataTables/dataTables.bootstrap.min.js"></script>
    <script src="~/Scripts/DataTables/dataTables.responsive.min.js"></script>
    <script src="~/Scripts/DataTables/responsive.bootstrap.min.js"></script>
    @*Блок скриптов для работы с DateTimePicker*@
        <script type="text/javascript">

        $.datetimepicker.setLocale('ru');

        // <![CDATA[
        jQuery(function () {
            jQuery('.dff').datetimepicker({
                format: 'd/m/Y',
                formatDate: 'd/m/Y',
                timepicker: false
            });
        });
        // ]]>

        $.validator.methods.date = function (value, element) {
            if (value) {
                try {
                    $.datepicker.parseDate('dd/MM/yy', value);
                } catch (ex) {
                    return false;
                }
            }
            return true;
        };
    </script>

    <script type="text/javascript">
        $(function () {
            $('#loadingImg').hide();
            var table = $('#gridtable').DataTable({
                "processing": true,
                "serverSide": true,
                "filter": true,
                "orderMulti": true,
                "responsive": true,
                "pagingType": "simple_numbers",
                "dom": '<"top"l>rt<"bottom"ip><"clear">',
                "language": {
                    "lengthMenu": "Записей: _MENU_",
                    "zeroRecords": "Записи отсутствуют",
                    "info": "Страница _PAGE_ из _PAGES_. Записи _START_-_END_ из _TOTAL_",
                    "infoEmpty": "Записи отсутствуют",
                    "infoFiltered": "(Отфильтровано из _MAX_ записей)",
                    "search": "Поиск",
                    "processing": "<div id='loadingImg'><div id='preloadImg'><img src='../Content/Images/loader.gif' /></div></div>",
                    "sInfoThousands": " ",
                    "oPaginate": {
                        "sNext": ">",
                        "sPrevious": "<"
                    }
                },
                "ajax": {
                    "url": "/Directum/LoadProjects",
                    "type": "POST",
                    "datatype": "json",
                    dataSrc: function (d) {
                        if (d.data.length === 0) {
                            if (d.errormessage != "") {
                                alert(d.errormessage);
                            }
                        }
                        return d.data;
                    }
                },
                "columns": [
                    { "data": "FullName", "name": "FullName", "autoWidth": true },
                    { "data": "ShortName", "name": "ShortName", "autoWidth": true },
                    { "data": "Desc", "name": "Desc", "autoWidth": true },
                    { "data": "ProjectType", "name": "ProjectType", "autoWidth": true },
                    { "data": "State", "name": "State", "autoWidth": true },
                     {
                         "data": "StartDateFact", "name": "StartDateFact", "autoWidth": true,
                         "type": "date ",
                         "render": function (value) {
                             if (value === null) return "";
                             var pattern = /Date\(([^)]+)\)/;
                             var results = pattern.exec(value);
                             var dt = new Date(parseFloat(results[1]));
                             var _d = dt.getDate() < 10 ? "0" + dt.getDate() : dt.getDate();
                             var _m = dt.getMonth() < 10 ? "0" + (dt.getMonth() + 1) : (dt.getMonth() + 1);
                             return _d + "/" + _m + "/" + dt.getFullYear();
                         }
                     },
                    {
                        "data": "EndDateFact", "name": "EndDateFact", "autoWidth": true,
                        "type": "date ",
                        "render": function (value) {
                            if (value === null) return "";
                            var pattern = /Date\(([^)]+)\)/;
                            var results = pattern.exec(value);
                            var dt = new Date(parseFloat(results[1]));
                            var _d = dt.getDate() < 10 ? "0" + dt.getDate() : dt.getDate();
                            var _m = dt.getMonth() < 10 ? "0" + (dt.getMonth() + 1) : (dt.getMonth() + 1);
                            return _d + "/" + _m + "/" + dt.getFullYear();
                        }
                    },
                    {
                        "data": "StartDatePlan", "name": "StartDatePlan", "autoWidth": true,
                        "type": "date ",
                        "render": function (value) {
                            if (value === null) return "";
                            var pattern = /Date\(([^)]+)\)/;
                            var results = pattern.exec(value);
                            var dt = new Date(parseFloat(results[1]));
                            var _d = dt.getDate() < 10 ? "0" + dt.getDate() : dt.getDate();
                            var _m = dt.getMonth() < 10 ? "0" + (dt.getMonth() + 1) : (dt.getMonth() + 1);
                            return _d + "/" + _m + "/" + dt.getFullYear();
                        }
                    },
                    {
                        "data": "EndDatePlan", "name": "EndDatePlan", "autoWidth": true,
                        "type": "date ",
                        "render": function (value) {
                            if (value === null) return "";
                            var pattern = /Date\(([^)]+)\)/;
                            var results = pattern.exec(value);
                            var dt = new Date(parseFloat(results[1]));
                            var _d = dt.getDate() < 10 ? "0" + dt.getDate() : dt.getDate();
                            var _m = dt.getMonth() < 10 ? "0" + (dt.getMonth() + 1) : (dt.getMonth() + 1);
                            return _d + "/" + _m + "/" + dt.getFullYear();
                        }
                    }
                ]
            });



            table.columns().eq(0).each(function (colIdx) {
                $('.sb', $('th')[colIdx]).on('keyup change', function () {
                    table.column(colIdx).search(this.value).draw();
                });

                $('.dff', $('th')[colIdx]).on('change', function () {
                    table.column(colIdx).search(this.value).draw();
                });
            });

        });

    </script>

    <script>
        $('body').on('click', '#filterBtn', function () {
            $('#search-row').toggle(300);
        });

        $('body').on('click', '#filterClear', function () {
            var table = $('#gridtable').DataTable().draw();
            $(".sb, .dff").each(function (colIdx) {
                $(this).val('');
                table.column(colIdx).search('');
            });
            table.draw();

        });
    </script>
}